/** *  ©2012 Andrew Wei (http://andrewwei.mu) * *  This software is released under the MIT License: *  http://www.opensource.org/licenses/mit-license.php */package io.variante.utils{    /**     * Set of utility methods for Numbers.     */    public final class VSNumberUtil    {        /**         * String Vector of numbers from zero to one hundred.         */        public static const NUMBERS_ZERO_TO_HUNDRED:Vector.<String> = Vector.<String>        ([            'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine',            'ten', 'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'nineteen',            'twenty', 'twenty-one', 'twenty-two', 'twenty-three', 'twenty-four', 'twenty-five', 'twenty-six', 'twenty-seven', 'twenty-eight', 'twenty-nine',            'thirty', 'thirty-one', 'thirty-two', 'thirty-three', 'thirty-four', 'thirty-five', 'thirty-six', 'thirty-seven', 'thirty-eight', 'thirty-nine',            'forty', 'forty-one', 'forty-two', 'forty-three', 'forty-four', 'forty-five', 'forty-six', 'forty-seven', 'forty-eight', 'forty-nine',            'fifty', 'fifty-one', 'fifty-two', 'fifty-three', 'fifty-four', 'fifty-five', 'fifty-six', 'fifty-seven', 'fifty-eight', 'fifty-nine',            'sixty', 'sixty-one', 'sixty-two', 'sixty-three', 'sixty-four', 'sixty-five', 'sixty-six', 'sixty-seven', 'sixty-eight', 'sixty-nine',            'seventy', 'seventy-one', 'seventy-two', 'seventy-three', 'seventy-four', 'seventy-five', 'seventy-six', 'seventy-seven', 'seventy-eight', 'seventy-nine',            'eighty', 'eighty-one', 'eighty-two', 'eighty-three', 'eighty-four', 'eighty-five', 'eighty-six', 'eighty-seven', 'eighty-eight', 'eighty-nine',            'ninety', 'ninety-one', 'ninety-two', 'ninety-three', 'ninety-four', 'ninety-five', 'ninety-six', 'ninety-seven', 'ninety-eight', 'ninety-nine',            'one hundred'        ]);        /**         * String Vector of roman numerals from zero to one hundred.         */        public static const ROMAN_NUMERALS_ZERO_TO_HUNDRED:Vector.<String> = Vector.<String>        ([            '?', 'I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX',            'X', 'XI', 'XII', 'XIII', 'XIV', 'XV', 'XVI', 'XVII', 'XVIII', 'XIX',            'XX', 'XXI', 'XXII', 'XXIII', 'XXIV', 'XXV', 'XXVI', 'XXVII', 'XXVIII', 'XXIX',            'XXX', 'XXXI', 'XXXII', 'XXXIII', 'XXXIV', 'XXXV', 'XXXVI', 'XXXVII', 'XXXVIII', 'XXXIX',            'XL', 'XLI', 'XLII', 'XLIII', 'XLIV', 'XLV', 'XLVI', 'XLVII', 'XLVIII', 'XLIX',            'L', 'LI', 'LII', 'LIII', 'LIV', 'LV', 'LVI', 'LVII', 'LVIII', 'LIX',            'LX', 'LXI', 'LXII', 'LXIII', 'LXIV', 'LXV', 'LXVI', 'LXVII', 'LXVIII', 'LXIX',            'LXX', 'LXXI', 'LXXII', 'LXXIII', 'LXXIV', 'LXXV', 'LXXVI', 'LXXVII', 'LXXVIII', 'LXXIX',            'LXXX', 'LXXXI', 'LXXXII', 'LXXXIII', 'LXXXIV', 'LXXXV', 'LXXXVI', 'LXXXVII', 'LXXXVIII', 'LXXXIX',            'XC', 'XCI', 'XCII', 'XCIII', 'XCIV', 'XCV', 'XCVI', 'XCVII', 'XCVIII', 'XCIX',            'C'        ]);        /**         * Checks if a given integer is odd.         *         * @param $int         *         * @return <code>true</code> if odd, <code>false</code> otherwise.         */        public static function isOdd($int:int):Boolean        {            if (($int * 0.5) != Math.floor($int * 0.5))            {                return true;            }            else            {                return false;            }        }        /**         * Checks if a given integer is even, defaults zero to even.         *         * @param $int         * @param $isZeroEven         *         * @return <code>true</code> if even, <code>false</code> otherwise.         */        public static function isEven($int:int, $isZeroEven:Boolean = true):Boolean        {            if ($int == 0)            {                return $isZeroEven;            }            if (($int * 0.5) == Math.floor($int * 0.5))            {                return true;            }            else            {                return false;            }        }        /**         * Checks if a given integer is a prime number.         *         * @param $int         *         * @return <code>true</code> if prime, <code>false</code> otherwise.         */        public static function isPrime($int:int):Boolean        {            if ($int < 1)            {                return false;            }            for (var i:int = 2; i < Math.sqrt($int); i++)            {                if ($int % i == 0)                {                    return false;                }            }            return true;        }        /**         * Generates a random number from the given inclusive boundaries.         *         * @param $low         * @param $high         *         * @return A random number from the given inclusive boundaries.         */        public static function randomNumber($low:Number, $high:Number):Number        {            return (Math.random() * ($high - $low)) + $low;        }        /**         * Generates a random integer from the given inclusive boundaries.         *         * @param $low         * @param $high         *         * @return A random integer from the given inclusive boundaries.         */        public static function randomInteger($low:int, $high:int):int        {            return Math.round(Math.random() * ($high - $low)) + $low;        }        /**         * Normalizes a given number with specified number of decimal places.         *         * @param $number         * @param $decimals         *         * @return The normalized number.         */        public static function normalize($number:Number, $decimals:int = 3):Number        {            var buffer:Number = $number;            if (buffer > 1)            {                buffer = 1;            }            else if (buffer < 0)            {                buffer = 0;            }            buffer = buffer.toFixed($decimals) as Number;            return buffer;        }        /**         * Computes the sum of a linear Array object.         *         * @param $array         * @param $startIndex         * @param $endIndex         *         * @return The sum.         */        public static function sum($array:Array, $startIndex:int = 0, $endIndex:int = -1):Number        {            VSAssert.assert(VSArrayUtil.isLinear($array), 'Argument in parameter $array must be a linear array.');            var end:int;            var sum:Number = 0;            if ($endIndex == -1)            {                end = $array.length;            }            else            {                end = $endIndex;            }            for (var i:int = $startIndex; i < end; i++)            {                sum += $array[i];            }            return sum;        }        /**         * Computes the product of a linear Array object.         *         * @param $array         * @param $startIndex         * @param $endIndex         *         * @return The product.         */        public static function product($array:Array, $startIndex:int = 0, $endIndex:int = -1):Number        {            VSAssert.assert(VSArrayUtil.isLinear($array), 'Argument in parameter $array must be a linear array.');            var end:int;            var product:Number = 0;            if ($endIndex == -1)            {                end = $array.length;            }            else            {                end = $endIndex;            }            for (var i:int = $startIndex; i < end; i++)            {                product *= $array[i];            }            return product;        }        /**         * Computes the average of a linear Array object.         *         * @param $array         *         * @return The average.         */        public static function average($array:Array):Number        {            VSAssert.assert(VSArrayUtil.isLinear($array), 'Argument in parameter $array must be a linear array.');            return (sum($array) / $array.length);        }        /**         * Formats a positive integer into a specified number of digits, appending zeroes in front of the integer.         *         * @param $uint         * @param $digits         *         * @return <code>String</code> object of the formatted integer.         */        public static function formatPositiveIntegerAppendZero($uint:uint, $digits:int = 2):String        {            var o:String = $uint.toString();            var delta:int = $digits - o.length;            if (delta > 0)            {                for (var i:int = 0; i < delta; i++)                {                    o = '0' + o;                }            }            return o;        }        /**         * Converts degrees to radians.         *         * @param $degrees         *         * @return Radian value.         */        public static function toRadian($degrees:Number):Number        {            return $degrees * Math.PI / 180;        }        /**         * Converts radians to degrees.         *         * @param $radians         *         * @return Degree value.         */        public static function toDegree($radians:Number):Number        {            return $radians * 180 / Math.PI;        }    }}