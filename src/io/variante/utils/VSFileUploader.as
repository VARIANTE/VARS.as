/** *  (c) VARIANTE <http://variante.io> * *  This software is released under the MIT License: *  http://www.opensource.org/licenses/mit-license.php */package io.variante.utils{    import flash.events.DataEvent;    import flash.events.Event;    import flash.events.HTTPStatusEvent;    import flash.events.IOErrorEvent;    import flash.events.ProgressEvent;    import flash.events.SecurityErrorEvent;    import flash.net.FileFilter;    import flash.net.FileReference;    import flash.net.URLRequest;    import io.variante.events.VSEvent;    import io.variante.events.VSEventDispatcher;    import io.variante.events.VSIOErrorEvent;    import io.variante.events.VSProgressEvent;    /**     * Dispatched when file upload is canceled.     *     * @eventType io.variante.events.VSEvent.CANCEL     */    [Event(name = 'CANCEL', type = 'io.variante.events.VSEvent')]    /**     * Dispatched when file upload is complete.     *     * @eventType io.variante.events.VSEvent.COMPLETE     */    [Event(name = 'COMPLETE', type = 'io.variante.events.VSEvent')]    /**     * Dispatched when file browser window is open.     *     * @eventType io.variante.events.VSEvent.OPEN     */    [Event(name = 'OPEN', type = 'io.variante.events.VSEvent')]    /**     * Dispatched when file is selected from the file browser window     *     * @eventType io.variante.events.VSEvent.SELECT     */    [Event(name = 'SELECT', type = 'io.variante.events.VSEvent')]    /**     * Dispatched during uploading process.     *     * @eventType io.variante.events.VSProgressEvent.PROGRESS     */    [Event(name = 'PROGRESS', type = 'io.variante.events.VSProgressEvent')]    /**     * Dispatched when file uploading results in a HTTP status error.     *     * @eventType flash.events.HTTPStatusEvent.HTTP_STATUS     */    [Event(name = 'httpStatus', type = 'flash.events.HTTPStatusEvent')]    /**     * Dispatched when file uploading results in an IO error.     *     * @eventType io.variante.events.VSIOErrorEvent.IO_ERROR     */    [Event(name = 'IO_ERROR', type = 'io.variante.events.VSIOErrorEvent')]    /**     * Dispatched when file uploading results in a security error.     *     * @eventType flash.events.SecurityErrorEvent.SECURITY_ERROR     */    [Event(name = 'securityError', type = 'flash.events.SecurityErrorEvent')]    /**     * Dispatched when file uploading is complete and yields data.     *     * @eventType flash.events.DataEvent.UPLOAD_COMPLETE_DATA     */    [Event(name = 'uploadCompleteData', type = 'flash.events.DataEvent')]    /**     *  A class used for uploading files onto the server, prompting the     *  file browsing window and allowing users to choose which file to upload.     *  Requires user to specify th uploading script (in PHP), the location     *  in the server to upload the file to, and file filters.     */    public class VSFileUploader extends VSEventDispatcher    {        /**         * @private         *         * Filters of files to be uploaded.         */        private var _fileFilter:FileFilter;        /**         * @private         *         * File reference.         */        private var _file:FileReference;        /**         * @private         *         * Path of directory to upload to.         */        private var _uploadPath:URLRequest;        /**         * @private         *         * String used to store name of file to be uploaded.         */        private var _fileName:String;        /**         * Gets the name of the file being uploaded.         */        public function get filenName():String { return _fileName; }        /**         * Creates a new FileUploader instance.         *         * @param $uploadScript   Full path of PHP script for uploading files.         * @param $uploadPath     Full path of directory for files to be uploaded to.         * @param $fileFilter     File filter for upload files.         */        public function VSFileUploader($uploadScript:String, $uploadPath:String, $fileFilter:FileFilter)        {            _uploadPath = new URLRequest($uploadScript + '?path=' + $uploadPath);            _file       = new FileReference();            _fileFilter = $fileFilter;            _file.addEventListener(Event.CANCEL, _onCancel, false, 0, true);            _file.addEventListener(Event.COMPLETE, _onComplete, false, 0, true);            _file.addEventListener(HTTPStatusEvent.HTTP_STATUS, _onHTTPStatus, false, 0, true);            _file.addEventListener(IOErrorEvent.IO_ERROR, _onIOError, false, 0, true);            _file.addEventListener(Event.OPEN, _onOpen, false, 0, true);            _file.addEventListener(ProgressEvent.PROGRESS, _onProgress, false, 0, true);            _file.addEventListener(SecurityErrorEvent.SECURITY_ERROR, _onSecurityError, false, 0, true);            _file.addEventListener(DataEvent.UPLOAD_COMPLETE_DATA, _onUploadComplete, false, 0, true);            _file.addEventListener(Event.SELECT, _onUploadSelect, false, 0, true);        }        /**         * Destroys this FileUploader instance.         */        public function kill():void        {            _file.removeEventListener(Event.CANCEL, _onCancel);            _file.removeEventListener(Event.COMPLETE, _onComplete);            _file.removeEventListener(HTTPStatusEvent.HTTP_STATUS, _onHTTPStatus);            _file.removeEventListener(IOErrorEvent.IO_ERROR, _onIOError);            _file.removeEventListener(Event.OPEN, _onOpen);            _file.removeEventListener(ProgressEvent.PROGRESS, _onProgress);            _file.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, _onSecurityError);            _file.removeEventListener(DataEvent.UPLOAD_COMPLETE_DATA, _onUploadComplete);            _file.removeEventListener(Event.SELECT, _onUploadSelect);            _uploadPath = null;            _file       = null;            _fileFilter = null;            _fileName   = null;        }        /**         * Starts browsing for files to upload with specified filter.         */        public function browse():void        {            _file.browse(new Array(_fileFilter));        }        /**         * @private         *         * flash.events.Event.CANCEL handler, when uploading of file is cancelled.         *         * @param $event         */        private function _onCancel($event:Event):void        {            dispatchEvent(new VSEvent($event.type));        }        /**         * @private         *         * flash.events.Event.COMPLETE handler, when uploading of file is complete.         *         * @param $event         */        private function _onComplete($event:Event):void        {            dispatchEvent(new VSEvent($event.type));        }        /**         * @private         *         * flash.events.HTTPStatusEvent.HTTP_STATUS handler.         *         * @param $event         */        private function _onHTTPStatus($event:HTTPStatusEvent):void        {            dispatchEvent($event);        }        /**         * @private         *         * flash.events.Event.OPEN handler.         *         * @param $event         */        private function _onOpen($event:Event):void        {            dispatchEvent(new VSEvent(VSEvent.OPEN));        }        /**         * @private         *         * flash.events.IOErrorEvent.IO_ERROR handler.         *         * @param $event         */        private function _onIOError($event:IOErrorEvent):void        {            dispatchEvent(new VSIOErrorEvent(VSIOErrorEvent.IO_ERROR, null, $event.bubbles, $event.cancelable, $event.text, $event.errorID));        }        /**         * @private         *         * flash.events.SecurityErrorEvent.SECURITY_ERROR handler.         *         * @param $event         */        private function _onSecurityError($event:SecurityErrorEvent):void        {            dispatchEvent($event);        }        /**         * @private         *         * flash.events.ProgressEvent.PROGRESS handler.         *         * @param $event         */        private function _onProgress($event:ProgressEvent):void        {            dispatchEvent(new VSProgressEvent(VSProgressEvent.PROGRESS, { percent:($event.bytesLoaded / $event.bytesTotal) }, $event.bubbles, $event.cancelable, $event.bytesLoaded, $event.bytesTotal));        }        /**         * @private         *         * flash.events.DataEvent.UPLOAD_COMPLETE_DATA handler.         *         * @param $event         */        private function _onUploadComplete($event:DataEvent):void        {            $event.data = _fileName;            dispatchEvent($event);        }        /**         * @private         *         * flash.events.Event.SELECT handler.         *         * @param $event         */        private function _onUploadSelect($event:Event):void        {            var file:FileReference = FileReference($event.target);            _fileName = file.name;            file.upload(_uploadPath);            dispatchEvent(new VSEvent(VSEvent.SELECT, { fileName: _fileName, uploadPath: _uploadPath }));        }    }}