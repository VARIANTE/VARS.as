/** *  (c) VARIANTE <http://variante.io> * *  This software is released under the MIT License: *  http://www.opensource.org/licenses/mit-license.php */package io.variante.utils{    /**     * Set of utility methods for processing time.     */    public final class VSTimeUtil    {        /**         * A set of common time constants.         */        public static const SECONDS_PER_MINUTE:uint = 60;        public static const MINUTES_PER_HOUR:uint   = 60;        public static const SECONDS_PER_HOUR:uint   = SECONDS_PER_MINUTE * MINUTES_PER_HOUR;        public static const HOURS_PER_DAY:uint      = 24;        public static const SECONDS_PER_DAY:uint    = SECONDS_PER_HOUR * HOURS_PER_DAY;        public static const MINUTES_PER_DAY:uint    = MINUTES_PER_HOUR * HOURS_PER_DAY;        public static const DAYS_PER_WEEK:uint      = 7;        public static const DAYS_PER_YEAR:uint      = 365;        public static const WEEKS_PER_YEAR:uint     = 52;        /**         * Set of Vectors containing common terms related to dates.         */        public static const DAYS:Vector.<String>   = Vector.<String>(['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']);        public static const MONTHS:Vector.<String> = Vector.<String>(['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']);        /**         * Set of Vectors containing different variations of number of days in a month.         */        public static const DAYS_28:Vector.<uint>  = Vector.<uint>([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]);        public static const DAYS_29:Vector.<uint>  = Vector.<uint>([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]);        public static const DAYS_30:Vector.<uint>  = Vector.<uint>([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]);        public static const DAYS_31:Vector.<uint>  = Vector.<uint>([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]);        public static const JANUARY:Vector.<uint>   = DAYS_31;        public static const FEBRUARY:Vector.<uint>  = DAYS_28;        public static const MARCH:Vector.<uint>     = DAYS_31;        public static const APRIL:Vector.<uint>     = DAYS_30;        public static const MAY:Vector.<uint>       = DAYS_31;        public static const JUNE:Vector.<uint>      = DAYS_30;        public static const JULY:Vector.<uint>      = DAYS_31;        public static const AUGUST:Vector.<uint>    = DAYS_30;        public static const SEPTEMBER:Vector.<uint> = DAYS_31;        public static const OCTOBER:Vector.<uint>   = DAYS_30;        public static const NOVEMBER:Vector.<uint>  = DAYS_31;        public static const DECEMBER:Vector.<uint>  = DAYS_30;        /**         * Computes how long ago the passed in time is with respect to the current time.         *         * @param $year         * @param $month         * @param $day         * @param $hour         * @param $minute         * @param $second         * @param $millisecond         *         * @return A string indicating '___ min/hours/days ago'.         */        public static function getRelativeTime($year:Number = 0, $month:Number = 0, $day:Number = 0, $hour:Number = 0, $minute:Number = 0, $second:Number = 0, $millisecond:Number = 0):String        {            var dateCurr:Date     = new Date();            var date:Date         = new Date($year, $month - 1, $day, $hour, $minute, $second, $millisecond);            var utcCurr:Number    = dateCurr.getTime();            var utc:Number        = date.getTime();            var diff:Number       = (utcCurr - utc); // difference in milliseconds            var diffSecond:Number = diff / 1000; // difference in seconds            var diffMinute:Number = diffSecond / SECONDS_PER_MINUTE;            var diffHour:Number   = diffMinute / SECONDS_PER_MINUTE;            var diffDay:Number    = diffHour / HOURS_PER_DAY;            var string:String     = null;            if      (Math.floor(diffDay) > DAYS_PER_WEEK)  { string = (MONTHS[$month - 1] + ' ' + $month.toString() + ', ' + $year.toString()); }            else if (Math.floor(diffDay) == DAYS_PER_WEEK) { string = 'a week ago';                                                             }            else if (Math.floor(diffDay) > 1)              { string = (Math.floor(diffDay).toString() + ' days ago');                           }            else if (Math.floor(diffDay) == 1)             { string = 'yesterday';                                                              }            else if (Math.floor(diffHour) > 1)             { string = (Math.floor(diffHour).toString() + ' hours ago');                         }            else if (Math.floor(diffHour) == 1)            { string = 'an hour ago';                                                            }            else if (Math.floor(diffMinute) > 1)           { string = (Math.floor(diffMinute).toString() + ' minutes ago');                     }            else if (Math.floor(diffMinute) == 1)          { string = 'a minute ago';                                                           }            else                                           { string = 'a moment ago';                                                           }            return string;        }        /**         * Gets the current number of hours.         *         * @return Integer value of current number of hours.         */        public static function getCurrentHours():int        {            var date:Date = new Date();            return date.hours;        }        /**         * Gets the current number of minutes.         *         * @return Integer value of current number of minutes.         */        public static function getCurrentMinutes():int        {            var date:Date = new Date();            return date.minutes;        }        /**         * Gets the current number of seconds.         *         * @return Integer value of current number of seconds.         */        public static function getCurrentSeconds():int        {            var date:Date = new Date();            return date.seconds;        }    }}