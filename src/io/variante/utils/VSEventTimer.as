/** *  ©2012 Andrew Wei (http://andrewwei.mu) * *  This software is released under the MIT License: *  http://www.opensource.org/licenses/mit-license.php */package io.variante.utils{    import flash.events.TimerEvent;    import flash.utils.Dictionary;    import flash.utils.Timer;    /**     * Static utility class for executing methods in time intervals.     */    public final class VSEventTimer    {        /**         * @private         *         * Dictionary for storing objects passed into the EventTimer.         */        private static var _dictionary:Dictionary;        /**         * Calls a function after a given delay, with option to repeat an indicated number of times.         *         * @param $method   Method to call after the given delay.         * @param $delay    Delay in milliseconds  to call method.         * @param $repeat   Number of recurrances (defaults to 0, infinite).         * @param $params   Params for $method.         */        public static function addEvent($method:Function, $delay:Number, $repeat:int = 0, ...$params:Array):void        {            if (_dictionary == null)            {                _dictionary = new Dictionary(true);            }            var timedObject:Object = new Object();            timedObject['timer']  = new Timer($delay, $repeat);            timedObject['method'] = $method;            timedObject['params'] = $params;            _dictionary[Timer(timedObject['timer'])] = timedObject;            Timer(timedObject['timer']).addEventListener(TimerEvent.TIMER, _onTimer, false, 0, true);            Timer(timedObject['timer']).addEventListener(TimerEvent.TIMER_COMPLETE, _onTimerComplete, false, 0, true);            Timer(timedObject['timer']).start();        }        /**         * Removes a registered event by the registered method.         *         * @param $method         */        public static function removeEvent($method:Function):void        {            for (var k:Object in _dictionary)            {                if ((_dictionary[k]['method'] as Function) == $method)                {                    var timer:Timer = _dictionary[k]['timer'] as Timer;                    if (timer.hasEventListener(TimerEvent.TIMER))                    {                        timer.stop();                        timer.removeEventListener(TimerEvent.TIMER, _onTimer);                        timer.removeEventListener(TimerEvent.TIMER_COMPLETE, _onTimerComplete);                    }                    delete _dictionary[k];                    break;                }            }            if (VSDictionaryUtil.sizeOf(_dictionary) == 0)            {                _dictionary = null;            }        }        /**         * Kills all existing timed events.         */        public static function killAllEvents():void        {            for (var k:Object in _dictionary)            {                var timer:Timer = _dictionary[k]['timer'] as Timer;                if (timer.hasEventListener(TimerEvent.TIMER))                {                    timer.stop();                    timer.removeEventListener(TimerEvent.TIMER, _onTimer);                    timer.removeEventListener(TimerEvent.TIMER_COMPLETE, _onTimerComplete);                }                delete _dictionary[k];            }        }        /**         * @private         *         * flash.events.TimerEvent.TIMER handler.         *         * @param $event         */        private static function _onTimer($event:TimerEvent):void        {            var timer:Timer = $event.currentTarget as Timer;            (_dictionary[timer]['method'] as Function).apply(null, _dictionary[timer]['params']);        }        /**         * @private         *         * flash.events.TimerEvent.TIMER_COMPLETE handler.         *         * @param $event         */        private static function _onTimerComplete($event:TimerEvent):void        {            var timer:Timer = $event.currentTarget as Timer;            timer.stop();            timer.removeEventListener(TimerEvent.TIMER, _onTimer);            timer.removeEventListener(TimerEvent.TIMER_COMPLETE, _onTimerComplete);            delete _dictionary[timer];        }    }}