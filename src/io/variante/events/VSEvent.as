/** *  ©2012 Andrew Wei (http://andrewwei.mu) * *  This software is released under the MIT License: *  http://www.opensource.org/licenses/mit-license.php */package io.variante.events{    import flash.events.Event;    /**     * Extended flash.events.Event with the ability to store user data.     */    public class VSEvent extends Event implements IVSEvent    {        public static const ACTIVATE:String                     = 'ACTIVATE';        public static const ADDED:String                        = 'ADDED';        public static const ADDED_TO_STAGE:String               = 'ADDED_TO_STAGE';        public static const CANCEL:String                       = 'CANCEL';        public static const CHANGE:String                       = 'CHANGE';        public static const CLEAR:String                        = 'CLEAR';        public static const CLOSE:String                        = 'CLOSE';        public static const COMPLETE:String                     = 'COMPLETE';        public static const CONNECT:String                      = 'CONNECT';        public static const COPY:String                         = 'COPY';        public static const CUT:String                          = 'CUT';        public static const DEACTIVATE:String                   = 'DEACTIVATE';        public static const ENTER_FRAME:String                  = 'ENTER_FRAME';        public static const FRAME_CONSTRUCTED:String            = 'FRAME_CONSTRUCTED';        public static const EXIT_FRAME:String                   = 'EXIT_FRAME';        public static const ID3:String                          = 'ID3';        public static const INIT:String                         = 'INIT';        public static const MOUSE_LEAVE:String                  = 'MOUSE_LEAVE';        public static const OPEN:String                         = 'OPEN';        public static const PASTE:String                        = 'PASTE';        public static const REMOVED:String                      = 'REMOVED';        public static const REMOVED_FROM_STAGE:String           = 'REMOVED_FROM_STAGE';        public static const RENDER:String                       = 'RENDER';        public static const RESIZE:String                       = 'RESIZE';        public static const SCROLL:String                       = 'SCROLL';        public static const SCROLL_COMPLETE:String              = 'SCROLL_COMPLETE';        public static const TEXT_INTERACTION_MODE_CHANGE:String = 'TEXT_INTERACTION_MODE_CHANGE';        public static const SELECT:String                       = 'SELECT';        public static const DESELECT:String                     = 'DESELECT';        public static const SELECT_ALL:String                   = 'SELECT_ALL';        public static const SOUND_COMPLETE:String               = 'SOUND_COMPLETE';        public static const TAB_CHILDREN_CHANGE:String          = 'TAB_CHILDREN_CHANGE';        public static const TAB_ENABLED_CHANGE:String           = 'TAB_ENABLED_CHANGE';        public static const TAB_INDEX_CHANGE:String             = 'TAB_INDEX_CHANGE';        public static const UNLOAD:String                       = 'UNLOAD';        public static const FULLSCREEN:String                   = 'FULLSCREEN';        public static const INIT_COMPLETE:String                = 'INIT_COMPLETE';        public static const ENABLE:String                       = 'ENABLE';        public static const DISABLE:String                      = 'DISABLE';        public static const HIGHLIGHT:String                    = 'HIGHLIGHT';        public static const UNHIGHLIGHT:String                  = 'UNHIGHLIGHT';        public static const TRANSITION_IN:String                = 'TRANSITION_IN';        public static const TRANSITION_IN_COMPLETE:String       = 'TRANSITION_IN_COMPLETE';        public static const TRANSITION_OUT:String               = 'TRANSITION_OUT';        public static const TRANSITION_OUT_COMPLETE:String      = 'TRANSITION_OUT_COMPLETE';        /**         * User data.         */        private var _data:Object;        /**         * @inheritDoc         */        public function get data():Object { return _data; }        /**         * @inheritDoc         */        public function set data(value:Object):void { _data = value; }        /**         * Creates a new VSEvent instance.         *         * @param $type         * @param $data         * @param $bubbles         * @param $cancelable         */        public function VSEvent($type:String, $data:Object = null, $bubbles:Boolean = false, $cancelable:Boolean = false)        {            data = $data;            super($type, $bubbles, $cancelable);        }        /**         * @inheritDoc         */        public override function clone():Event        {            return new VSEvent(type, data, bubbles, cancelable);        }    }}