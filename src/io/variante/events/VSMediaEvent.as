/** *  ©2012 Andrew Wei (http://andrewwei.mu) * *  This software is released under the MIT License: *  http://www.opensource.org/licenses/mit-license.php */package io.variante.events{    import flash.events.Event;    /**     * Extended flash.events.Event with the ability to store user data.     */    public class VSMediaEvent extends Event implements IVSEvent    {        public static const PLAY:String            = 'PLAY';        public static const PAUSE:String           = 'PAUSE';        public static const STOP:String            = 'STOP';        public static const REPEAT:String          = 'REPEAT';        public static const SEEK:String            = 'SEEK';        public static const PLAY_COMPLETE:String   = 'PLAY_COMPLETE';        public static const VOLUME_INCREASE:String = 'VOLUME_INCREASE';        public static const VOLUME_DECREASE:String = 'VOLUME_DECREASE';        public static const MUTE:String            = 'MUTE';        public static const UNMUTE:String          = 'UNMUTE';        /**         * User data.         */        private var _data:Object;        /**         * @inheritDoc         */        public function get data():Object { return _data; }        /**         * @inheritDoc         */        public function set data(value:Object):void { _data = value; }        /**         * Creates a new VSMediaEvent instance.         *         * @param $type         * @param $data         * @param $bubbles         * @param $cancelable         */        public function VSMediaEvent($type:String, $data:Object = null, $bubbles:Boolean = false, $cancelable:Boolean = false)        {            data = $data;            super($type, $bubbles, $cancelable);        }        /**         * @inheritDoc         */        public override function clone():Event        {            return new VSMediaEvent(type, data, bubbles, cancelable);        }    }}